<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin 0.9.4
// Source: searchrequest.proto
//   Date: 2015-02-19 14:41:55

namespace  {

  class SearchRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $query = null;
    
    /**  @var int */
    public $page_number = null;
    
    /**  @var int */
    public $result_per_page = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.SearchRequest');

      // REQUIRED STRING query = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "query";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL INT32 page_number = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "page_number";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL INT32 result_per_page = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "result_per_page";
      $f->type      = \DrSlump\Protobuf::TYPE_INT32;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <query> has a value
     *
     * @return boolean
     */
    public function hasQuery(){
      return $this->_has(1);
    }
    
    /**
     * Clear <query> value
     *
     * @return \SearchRequest
     */
    public function clearQuery(){
      return $this->_clear(1);
    }
    
    /**
     * Get <query> value
     *
     * @return string
     */
    public function getQuery(){
      return $this->_get(1);
    }
    
    /**
     * Set <query> value
     *
     * @param string $value
     * @return \SearchRequest
     */
    public function setQuery( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <page_number> has a value
     *
     * @return boolean
     */
    public function hasPageNumber(){
      return $this->_has(2);
    }
    
    /**
     * Clear <page_number> value
     *
     * @return \SearchRequest
     */
    public function clearPageNumber(){
      return $this->_clear(2);
    }
    
    /**
     * Get <page_number> value
     *
     * @return int
     */
    public function getPageNumber(){
      return $this->_get(2);
    }
    
    /**
     * Set <page_number> value
     *
     * @param int $value
     * @return \SearchRequest
     */
    public function setPageNumber( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <result_per_page> has a value
     *
     * @return boolean
     */
    public function hasResultPerPage(){
      return $this->_has(3);
    }
    
    /**
     * Clear <result_per_page> value
     *
     * @return \SearchRequest
     */
    public function clearResultPerPage(){
      return $this->_clear(3);
    }
    
    /**
     * Get <result_per_page> value
     *
     * @return int
     */
    public function getResultPerPage(){
      return $this->_get(3);
    }
    
    /**
     * Set <result_per_page> value
     *
     * @param int $value
     * @return \SearchRequest
     */
    public function setResultPerPage( $value){
      return $this->_set(3, $value);
    }
  }
}

